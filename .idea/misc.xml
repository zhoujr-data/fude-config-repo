<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="JUnitGeneratorProjectSettings">
    <option name="outputFilePattern" value="${SOURCEPATH}/../../test/${PACKAGE}/${FILENAME}" />
    <option name="selectedTemplateKey" value="JUnit 4" />
    <option name="vmTemplates">
      <map>
        <entry key="JUnit 3" value="######################################################################################## &#10;## &#10;## Available variables: &#10;##         $entryList.methodList - List of method composites &#10;##         $entryList.privateMethodList - List of private method composites &#10;##         $entryList.fieldList - ArrayList of class scope field names &#10;##         $entryList.className - class name &#10;##         $entryList.packageName - package name &#10;##         $today - Todays date in MM/dd/yyyy format &#10;## &#10;##            MethodComposite variables: &#10;##                $method.name - Method Name &#10;##                $method.signature - Full method signature in String form &#10;##                $method.reflectionCode - list of strings representing commented out reflection code to access method (Private Methods) &#10;##                $method.paramNames - List of Strings representing the method's parameters' names &#10;##                $method.paramClasses - List of Strings representing the method's parameters' classes &#10;## &#10;## You can configure the output class name using &quot;testClass&quot; variable below. &#10;## Here are some examples: &#10;## Test${entry.ClassName} - will produce TestSomeClass &#10;## ${entry.className}Test - will produce SomeClassTest &#10;## &#10;######################################################################################## &#10;## &#10;#macro (cap $strIn)$strIn.valueOf($strIn.charAt(0)).toUpperCase()$strIn.substring(1)#end &#10;## Iterate through the list and generate testcase for every entry. &#10;#foreach ($entry in $entryList) &#10;#set( $testClass=&quot;${entry.className}Test&quot;) &#10;## &#10;package test.$entry.packageName; &#10;&#10;import junit.framework.Test; &#10;import junit.framework.TestSuite; &#10;import junit.framework.TestCase; &#10;&#10;/** &#10;* ${entry.className} Tester. &#10;* &#10;* @author &lt;Authors name&gt; &#10;* @since &lt;pre&gt;$today&lt;/pre&gt; &#10;* @version 1.0 &#10;*/ &#10;public class $testClass extends TestCase { &#10;public $testClass(String name) { &#10;super(name); &#10;} &#10;&#10;public void setUp() throws Exception { &#10;super.setUp(); &#10;} &#10;&#10;public void tearDown() throws Exception { &#10;super.tearDown(); &#10;} &#10;&#10;#foreach($method in $entry.methodList) &#10;/** &#10;* &#10;* Method: $method.signature &#10;* &#10;*/ &#10;public void test#cap(${method.name})() throws Exception { &#10;//TODO: Test goes here... &#10;} &#10;&#10;#end &#10;&#10;#foreach($method in $entry.privateMethodList) &#10;/** &#10;* &#10;* Method: $method.signature &#10;* &#10;*/ &#10;public void test#cap(${method.name})() throws Exception { &#10;//TODO: Test goes here... &#10;#foreach($string in $method.reflectionCode) &#10;$string &#10;#end &#10;} &#10;&#10;#end &#10;&#10;public static Test suite() { &#10;return new TestSuite(${testClass}.class); &#10;} &#10;} &#10;#end" />
        <entry key="JUnit 4" value="######################################################################################## &#10;## &#10;## 可用变量： &#10;##         $entryList.methodList - 方法组合清单 &#10;##         $entryList.privateMethodList - 私有方法组合列表 &#10;##         $entryList.fieldList - 类作用域字段名称的集合&#10;##         $entryList.className - 类名&#10;##         $entryList.packageName - 包名&#10;##         $today - Todays date in MM/dd/yyyy format &#10;## &#10;##            方法复合变量: &#10;##                $method.name - 方法名 &#10;##                $method.signature - 字符串形式的完整方法签名&#10;##                $method.reflectionCode - 表示注释掉的反射代码的字符串列表，以访问方法（私有方法）&#10;##                $method.paramNames - 代表方法参数名称的字符串列表 &#10;##                $method.paramClasses - 代表方法参数类的字符串列表 &#10;## &#10;## 您可以使用下面的“ testClass”变量配置输出类名称。&#10;## 这里有些例子： &#10;## Test${entry.ClassName} - will produce TestSomeClass &#10;## ${entry.className}Test - will produce SomeClassTest &#10;## &#10;######################################################################################## &#10;## &#10;#macro (cap $strIn)$strIn.valueOf($strIn.charAt(0)).toUpperCase()$strIn.substring(1)#end &#10;## Iterate through the list and generate testcase for every entry. &#10;#foreach ($entry in $entryList) &#10;#set( $testClass=&quot;${entry.className}Test&quot;) &#10;## &#10;package $entry.packageName; &#10;&#10;import org.junit.Test; &#10;import org.junit.Before; &#10;import org.junit.After; &#10;import org.junit.runner.RunWith;&#10;import org.springframework.boot.test.context.SpringBootTest;&#10;import org.springframework.context.annotation.ComponentScan;&#10;import org.springframework.test.context.ActiveProfiles;&#10;import org.springframework.test.context.junit4.SpringRunner;&#10;import org.springframework.test.web.servlet.MockMvc;&#10;import org.springframework.test.web.servlet.setup.MockMvcBuilders;&#10;import com.zkpsych.multimodality.controller.external.ExternalIndicatorRecordUploadController;&#10;&#10;/** &#10; * ${entry.className} Tester. &#10; * &#10; * @author &lt;Authors name&gt; &#10; * @since &lt;pre&gt;$today&lt;/pre&gt; &#10; * @version 1.1.0 &#10; */ &#10;@RunWith(SpringRunner.class)&#10;@SpringBootTest(classes = MultimodalityStarterProviderCenterApplication.class)&#10;@ActiveProfiles(profiles = &quot;dev&quot;)&#10;@ComponentScan(basePackages = &quot;com.zkpsych&quot;)&#10;public class $testClass { &#10;&#10;&#9;private MockMvc mockMvc;&#10;&#10;&#9;@Before&#10;&#9;public void before() throws Exception { &#10;&#9;&#9;mockMvc = MockMvcBuilders.standaloneSetup(new ExternalIndicatorRecordUploadController()).build();&#10;&#9;} &#10;&#10;&#9;@After&#10;&#9;public void after() throws Exception { &#10;&#9;} &#10;&#10;&#9;#foreach($method in $entry.methodList) &#10;/** &#10;&#9; * &#10;&#9; * Method: $method.signature &#10;&#9; * &#10;&#9; */ &#10;&#9;@Test&#10;&#9;public void test#cap(${method.name})() throws Exception {&#9;&#9;&#10;&#9;&#9;//TODO: Test goes here... &#10;&#9;} &#10;&#10;&#9;#end &#10;&#10;&#9;#foreach($method in $entry.privateMethodList) &#10;/** &#10;&#9; * &#10;&#9; * Method: $method.signature &#10;&#9; * &#10;&#9; */ &#10;&#9;@Test&#10;&#9;public void test#cap(${method.name})() throws Exception { &#10;&#9;&#9;//TODO: Test goes here... &#10;&#9;#foreach($string in $method.reflectionCode) &#10;&#9;$string &#10;&#9;#end &#10;&#9;} &#10;&#10;&#9;#end &#10;} &#10;#end" />
      </map>
    </option>
  </component>
  <component name="ProjectRootManager" version="2" languageLevel="JDK_11" project-jdk-name="11" project-jdk-type="JavaSDK">
    <output url="file://$PROJECT_DIR$/out" />
  </component>
</project>